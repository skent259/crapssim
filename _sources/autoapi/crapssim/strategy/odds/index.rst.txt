crapssim.strategy.odds
======================

.. py:module:: crapssim.strategy.odds


Classes
-------

.. autoapisummary::

   crapssim.strategy.odds.OddsAmount
   crapssim.strategy.odds.PassLineOddsAmount
   crapssim.strategy.odds.DontPassOddsAmount
   crapssim.strategy.odds.ComeOddsAmount
   crapssim.strategy.odds.DontComeOddsAmount
   crapssim.strategy.odds.OddsMultiplier
   crapssim.strategy.odds.PassLineOddsMultiplier
   crapssim.strategy.odds.DontPassOddsMultiplier
   crapssim.strategy.odds.ComeOddsMultiplier
   crapssim.strategy.odds.DontComeOddsMultiplier


Module Contents
---------------

.. py:class:: OddsAmount(base_type: Type[crapssim.bet.PassLine | crapssim.bet.DontPass | crapssim.bet.Come | crapssim.bet.DontCome], odds_amounts: dict[int, SupportsFloat], always_working: bool = False)

   Bases: :py:obj:`crapssim.strategy.tools.Strategy`


   Strategy that takes places odds on a given number for a given bet type.


   .. py:attribute:: base_type


   .. py:attribute:: odds_amounts


   .. py:attribute:: always_working
      :value: False



   .. py:method:: completed(player: crapssim.strategy.tools.Player) -> bool

      Return True if there are no bets of base_type on the table.

      :param player: The player whose bets to check for.

      :rtype: True if there are no base type bets on the table, otherwise False.



   .. py:method:: update_bets(player: crapssim.strategy.tools.Player) -> None

      Add, remove, or change the bets on the table.

      This method is applied after the dice are rolled, the bets are updated,
      and the table is updated. It triggers in :py:meth:`.table.TableUpdate.run_strategies`.



   .. py:method:: _get_always_working_repr() -> str

      Since the default is false, only need to print when True



   .. py:method:: __repr__()


.. py:class:: PassLineOddsAmount(bet_amount: SupportsFloat, numbers: tuple[int] = (4, 5, 6, 8, 9, 10), always_working: bool = False)

   Bases: :py:obj:`OddsAmount`


   Strategy that takes places odds on a given number for a given bet type.


   .. py:attribute:: bet_amount


   .. py:attribute:: numbers
      :value: (4, 5, 6, 8, 9, 10)



   .. py:method:: __repr__() -> str


.. py:class:: DontPassOddsAmount(bet_amount: SupportsFloat, numbers: tuple[int] = (4, 5, 6, 8, 9, 10), always_working: bool = False)

   Bases: :py:obj:`OddsAmount`


   Strategy that takes places odds on a given number for a given bet type.


   .. py:attribute:: bet_amount


   .. py:attribute:: numbers
      :value: (4, 5, 6, 8, 9, 10)



   .. py:method:: __repr__() -> str


.. py:class:: ComeOddsAmount(bet_amount: SupportsFloat, numbers: tuple[int] = (4, 5, 6, 8, 9, 10), always_working: bool = False)

   Bases: :py:obj:`OddsAmount`


   Strategy that takes places odds on a given number for a given bet type.


   .. py:attribute:: bet_amount


   .. py:attribute:: numbers
      :value: (4, 5, 6, 8, 9, 10)



   .. py:method:: __repr__() -> str


.. py:class:: DontComeOddsAmount(bet_amount: SupportsFloat, numbers: tuple[int] = (4, 5, 6, 8, 9, 10), always_working: bool = False)

   Bases: :py:obj:`OddsAmount`


   Strategy that takes places odds on a given number for a given bet type.


   .. py:attribute:: bet_amount


   .. py:attribute:: numbers
      :value: (4, 5, 6, 8, 9, 10)



   .. py:method:: __repr__() -> str


.. py:class:: OddsMultiplier(base_type: Type[crapssim.bet.PassLine | crapssim.bet.DontPass | crapssim.bet.Come | crapssim.bet.DontCome], odds_multiplier: dict[int, int] | int, always_working: bool = False)

   Bases: :py:obj:`crapssim.strategy.tools.Strategy`


   Strategy that takes an AllowsOdds object and places Odds on it given either a multiplier,
   or a dictionary of points and multipliers.


   .. py:attribute:: base_type


   .. py:attribute:: always_working
      :value: False



   .. py:method:: get_point_number(bet: crapssim.bet.Bet, table: crapssim.strategy.tools.Table)
      :staticmethod:



   .. py:method:: update_bets(player: crapssim.strategy.tools.Player) -> None

      Add an Odds bet to the given base_types in the amount determined by the odds_multiplier.

      :param player: The player to add the odds bet to.



   .. py:method:: completed(player: crapssim.strategy.tools.Player) -> bool

      Return True if there are no bets of base_type on the table.

      :param player: The player whose bets to check for.

      :rtype: True if there are no base type bets on the table, otherwise False.



   .. py:method:: _get_odds_multiplier_repr() -> int | dict[int, int]

      If the odds_multiplier has multiple values return a dictionary with the values,
      if all the multipliers are the same return an integer of the multiplier.



   .. py:method:: _get_always_working_repr() -> str

      Since the default is false, only need to print when True



   .. py:method:: __repr__() -> str


.. py:class:: PassLineOddsMultiplier(odds_multiplier: dict[int, int] | int | None = None, always_working: bool = False)

   Bases: :py:obj:`OddsMultiplier`


   Strategy that adds an Odds bet to the PassLine bet. Equivalent to
   OddsMultiplier(PassLine, odds).


   .. py:method:: __repr__() -> str


.. py:class:: DontPassOddsMultiplier(odds_multiplier: dict[int, int] | int | None = None, always_working: bool = False)

   Bases: :py:obj:`OddsMultiplier`


   Strategy that adds a LayOdds bet to the DontPass bet. Equivalent to
   OddsMultiplier(DontPass, odds)


   .. py:method:: __repr__() -> str


.. py:class:: ComeOddsMultiplier(odds_multiplier: dict[int, int] | int | None = None, always_working: bool = False)

   Bases: :py:obj:`OddsMultiplier`


   Strategy that adds an Odds bet to the Come bet. Equivalent to
   OddsMultiplier(Come, odds).


   .. py:method:: __repr__() -> str


.. py:class:: DontComeOddsMultiplier(odds_multiplier: dict[int, int] | int | None = None, always_working: bool = False)

   Bases: :py:obj:`OddsMultiplier`


   Strategy that adds an Odds bet to the DontCome bet. Equivalent to
   OddsMultiplier(DontCome, odds).


   .. py:method:: __repr__() -> str


